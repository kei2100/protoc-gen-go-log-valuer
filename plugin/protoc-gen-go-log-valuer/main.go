package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

const (
	fmtPkg     = protogen.GoImportPath("fmt")
	slogPkg    = protogen.GoImportPath("log/slog")
	strconvPkg = protogen.GoImportPath("strconv")
)

func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, file := range plugin.FilesByPath {
			if !file.Generate {
				continue
			}
			generateFile(plugin, file)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Messages) == 0 {
		return nil
	}
	filename := fmt.Sprintf("%s.pb.log_valuer.go", file.GeneratedFilenamePrefix)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-log-valuer. DO NOT EDIT.")
	g.P("//")
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	for _, m := range file.Messages {
		generateMessage(g, m)
	}
	return g
}

func generateMessage(g *protogen.GeneratedFile, m *protogen.Message) {
	ident := g.QualifiedGoIdent(m.GoIdent)
	g.P("func (x *", ident, ") LogValue() ", g.QualifiedGoIdent(slogPkg.Ident("Value")), " {")
	g.P("if x == nil {")
	g.P("return ", g.QualifiedGoIdent(slogPkg.Ident("AnyValue(nil)")))
	g.P("}")

	g.P("attrs := make([]", g.QualifiedGoIdent(slogPkg.Ident("Attr")), ", 0, ", len(m.Fields), ")")
	for _, f := range m.Fields {
		if debugRedact(f.Desc.Options().(*descriptorpb.FieldOptions)) {
			g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`String("`)), f.Desc.Name(), `", "[REDACTED]"))`)
		} else if f.Desc.IsList() {
			generateListField(g, f)
		} else if f.Desc.IsMap() {
			generateMapField(g, f)
		} else {
			handleExplicitPresence(g, f, generatePrimitiveField)
		}
	}
	g.P("return ", g.QualifiedGoIdent(slogPkg.Ident("GroupValue(attrs...)")))
	g.P("}")
	g.P()

	for _, submsg := range m.Messages {
		if submsg.Desc.IsMapEntry() {
			continue
		}
		generateMessage(g, submsg)
	}
}

func handleExplicitPresence(g *protogen.GeneratedFile, f *protogen.Field, generateFunc func(*protogen.GeneratedFile, *protogen.Field)) {
	// Omit the fields that are defined as `Explicit Presence` and the value is not present.
	// https://protobuf.dev/programming-guides/field_presence/#presence-in-proto3-apis
	switch {
	case f.Oneof != nil && f.Desc.HasOptionalKeyword():
		// handle optional fields
		g.P("if x.", f.GoName, " != nil {")
		defer g.P("}")
	case f.Oneof != nil && !f.Desc.HasOptionalKeyword():
		// handle oneof fields
		g.P("if _, ok := x.Get", f.Oneof.GoName, "().(*", f.GoIdent, "); ok {")
		defer g.P("}")
	case f.Desc.Kind() == protoreflect.MessageKind || f.Desc.Kind() == protoreflect.GroupKind:
		// handle message fields
		g.P("if x.", f.GoName, " != nil {")
		defer g.P("}")
	}
	generateFunc(g, f)
}

func generateListField(g *protogen.GeneratedFile, f *protogen.Field) {
	// NOTE:
	// slog パッケージには slog.LogValuer の slice を slog.Value として扱う API がなさそう。
	// ```
	// attrs = append(attrs, slog.LogValuers("list_name", list_values)) // このような API は無い
	// ```
	// そのため、ここでは slice ではなく slice のインデックスをキーとする map のような形式で出力を行っている
	// ```
	// len(x.FieldName) == 0
	fname := f.Desc.Name()
	g.P("if len(x.", f.GoName, ") != 0 {")
	// len(x.FieldName) > 0
	attrs := fmt.Sprintf("attrs%d", f.Desc.Index())
	g.P(attrs, " := make([]", g.QualifiedGoIdent(slogPkg.Ident("Attr")), ", 0, len(x.", f.GoName, "))")
	g.P("for i, v := range x.", f.GoName, " {")
	switch f.Desc.Kind() {
	case protoreflect.BoolKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Bool(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	case protoreflect.BytesKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	case protoreflect.DoubleKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Float64(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	case protoreflect.EnumKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`String(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v.String()))`)
	case protoreflect.Fixed32Kind, protoreflect.Uint32Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Uint64(`)), fmtPkg.Ident("Sprintf"), `("%d", i), uint64(v)))`)
	case protoreflect.Fixed64Kind, protoreflect.Uint64Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Uint64(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	case protoreflect.FloatKind:
		g.P("_fmt_", fname, " := ", g.QualifiedGoIdent(strconvPkg.Ident("FormatFloat(float64(v), 'f', -1, 32)")))
		g.P("_", fname, ", _ := ", g.QualifiedGoIdent(strconvPkg.Ident("ParseFloat(")), "_fmt_", fname, ", 64)")
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Float64(`)), fmtPkg.Ident("Sprintf"), `("%d", i), float64(_`, fname, `)))`)
	case protoreflect.Int32Kind, protoreflect.Sfixed32Kind, protoreflect.Sint32Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Int64(`)), fmtPkg.Ident("Sprintf"), `("%d", i), int64(v)))`)
	case protoreflect.Int64Kind, protoreflect.Sfixed64Kind, protoreflect.Sint64Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Int64(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	case protoreflect.GroupKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	case protoreflect.MessageKind:
		g.P("if v, ok := interface{}(v).(", g.QualifiedGoIdent(slogPkg.Ident("LogValuer")), "); ok {")
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Attr{Key: `)), fmtPkg.Ident("Sprintf"), `("%d", i), Value: v.LogValue()})`)
		g.P("} else {")
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
		g.P("}")
	case protoreflect.StringKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`String(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	default:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%d", i), v))`)
	}
	g.P("}")
	g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Any("`)), fname, `", `, attrs, "))")
	g.P("}")
}

func generateMapField(g *protogen.GeneratedFile, f *protogen.Field) {
	// len(x.FieldName) == 0
	fname := f.Desc.Name()
	g.P("if len(x.", f.GoName, ") != 0 {")
	// len(x.FieldName) > 0
	attrs := fmt.Sprintf("attrs%d", f.Desc.Index())
	g.P(attrs, " := make([]", g.QualifiedGoIdent(slogPkg.Ident("Attr")), ", 0, len(x.", f.GoName, "))")
	g.P("for k, v := range x.", f.GoName, " {")
	switch f.Desc.MapValue().Kind() {
	case protoreflect.BoolKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Bool(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	case protoreflect.BytesKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	case protoreflect.DoubleKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Float64(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	case protoreflect.EnumKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`String(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v.String()))`)
	case protoreflect.Fixed32Kind, protoreflect.Uint32Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Uint64(`)), fmtPkg.Ident("Sprintf"), `("%v", k), uint64(v)))`)
	case protoreflect.Fixed64Kind, protoreflect.Uint64Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Uint64(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	case protoreflect.FloatKind:
		g.P("_fmt_", fname, " := ", g.QualifiedGoIdent(strconvPkg.Ident("FormatFloat(float64(v), 'f', -1, 32)")))
		g.P("_", fname, ", _ := ", g.QualifiedGoIdent(strconvPkg.Ident("ParseFloat(")), "_fmt_", fname, ", 64)")
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Float64(`)), fmtPkg.Ident("Sprintf"), `("%v", k), float64(_`, fname, `)))`)
	case protoreflect.Int32Kind, protoreflect.Sfixed32Kind, protoreflect.Sint32Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Int64(`)), fmtPkg.Ident("Sprintf"), `("%v", k), int64(v)))`)
	case protoreflect.Int64Kind, protoreflect.Sfixed64Kind, protoreflect.Sint64Kind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Int64(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	case protoreflect.GroupKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	case protoreflect.MessageKind:
		g.P("if vv, ok := interface{}(v).(", g.QualifiedGoIdent(slogPkg.Ident("LogValuer")), "); ok {")
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Attr{Key: `)), fmtPkg.Ident("Sprintf"), `("%v", k), Value: vv.LogValue()})`)
		g.P("} else {")
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
		g.P("}")
	case protoreflect.StringKind:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`String(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	default:
		g.P(attrs, " = append(", attrs, ", ", g.QualifiedGoIdent(slogPkg.Ident(`Any(`)), fmtPkg.Ident("Sprintf"), `("%v", k), v))`)
	}
	g.P("}")
	g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Any("`)), fname, `", `, attrs, "))")
	g.P("}")
}

func generatePrimitiveField(g *protogen.GeneratedFile, f *protogen.Field) {
	fname := f.Desc.Name()
	var gname string
	if f.Oneof != nil {
		gname = fmt.Sprintf("Get%s()", f.GoName)
	} else {
		gname = f.GoName
	}
	switch f.Desc.Kind() {
	case protoreflect.BoolKind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Bool("`)), fname, `", x.`, gname, "))")
	case protoreflect.BytesKind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Any("`)), fname, `", x.`, gname, "))")
	case protoreflect.DoubleKind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Float64("`)), fname, `", x.`, gname, "))")
	case protoreflect.EnumKind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`String("`)), fname, `", x.`, gname, ".String()))")
	case protoreflect.Fixed32Kind, protoreflect.Uint32Kind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Uint64("`)), fname, `", uint64(x.`, gname, ")))")
	case protoreflect.Fixed64Kind, protoreflect.Uint64Kind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Uint64("`)), fname, `", x.`, gname, "))")
	case protoreflect.FloatKind:
		g.P("_fmt_", fname, " := ", g.QualifiedGoIdent(strconvPkg.Ident("FormatFloat(float64(x.")), gname, "), 'f', -1, 32)")
		g.P("_", fname, ", _ := ", g.QualifiedGoIdent(strconvPkg.Ident("ParseFloat(")), "_fmt_", fname, ", 64)")
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Float64("`)), fname, `", _`, fname, "))")
	case protoreflect.Int32Kind, protoreflect.Sfixed32Kind, protoreflect.Sint32Kind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Int64("`)), fname, `", int64(x.`, gname, ")))")
	case protoreflect.Int64Kind, protoreflect.Sfixed64Kind, protoreflect.Sint64Kind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Int64("`)), fname, `", x.`, gname, "))")
	case protoreflect.GroupKind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Any("`)), fname, `", x.`, gname, "))")
	case protoreflect.MessageKind:
		g.P("if v, ok := interface{}(x.", gname, ").(", g.QualifiedGoIdent(slogPkg.Ident("LogValuer")), "); ok {")
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Attr{Key: "`)), fname, `", Value: v.LogValue()})`)
		g.P("} else {")
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Any("`)), fname, `", x.`, gname, "))")
		g.P("}")
	case protoreflect.StringKind:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`String("`)), fname, `", x.`, gname, "))")
	default:
		g.P("attrs = append(attrs, ", g.QualifiedGoIdent(slogPkg.Ident(`Any("`)), fname, `", x.`, gname, "))")
	}
}

func debugRedact(opts *descriptorpb.FieldOptions) bool {
	return opts.GetDebugRedact()
}
