// Code generated by protoc-gen-go-log-valuer. DO NOT EDIT.
//
// source: test/scalar_type.proto

package test

import (
	slog "log/slog"
	strconv "strconv"
)

func (x *ScalarType) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(nil)
	}
	attrs := make([]slog.Attr, 0, 21)
	attrs = append(attrs, slog.String("secret_val", "[REDACTED]"))
	attrs = append(attrs, slog.Float64("double_val", x.DoubleVal))
	_fmt_float_val := strconv.FormatFloat(float64(x.FloatVal), 'f', -1, 32)
	_float_val, _ := strconv.ParseFloat(_fmt_float_val, 64)
	attrs = append(attrs, slog.Float64("float_val", _float_val))
	attrs = append(attrs, slog.Int64("int32_val", int64(x.Int32Val)))
	attrs = append(attrs, slog.Int64("int64_val", x.Int64Val))
	attrs = append(attrs, slog.Uint64("uint32_val", uint64(x.Uint32Val)))
	attrs = append(attrs, slog.Uint64("uint64_val", x.Uint64Val))
	attrs = append(attrs, slog.Int64("sint32_val", int64(x.Sint32Val)))
	attrs = append(attrs, slog.Int64("sint64_val", x.Sint64Val))
	attrs = append(attrs, slog.Uint64("fixed32_val", uint64(x.Fixed32Val)))
	attrs = append(attrs, slog.Uint64("fixed64_val", x.Fixed64Val))
	attrs = append(attrs, slog.Int64("sfixed32_val", int64(x.Sfixed32Val)))
	attrs = append(attrs, slog.Int64("sfixed64_val", x.Sfixed64Val))
	attrs = append(attrs, slog.Bool("bool_val", x.BoolVal))
	attrs = append(attrs, slog.String("string_val", x.StringVal))
	attrs = append(attrs, slog.Any("bytes_val", x.BytesVal))
	attrs = append(attrs, slog.String("enum_val", x.EnumVal.String()))
	if _, ok := x.GetOneofVal().(*ScalarType_OneofStringVal); ok {
		attrs = append(attrs, slog.String("oneof_string_val", x.GetOneofStringVal()))
	}
	if _, ok := x.GetOneofVal().(*ScalarType_OneofInt64Val); ok {
		attrs = append(attrs, slog.Int64("oneof_int64_val", x.GetOneofInt64Val()))
	}
	if _, ok := x.GetOneofVal().(*ScalarType_OneofBoolVal); ok {
		attrs = append(attrs, slog.Bool("oneof_bool_val", x.GetOneofBoolVal()))
	}
	attrs = append(attrs, slog.String("_String", x.XString))
	return slog.GroupValue(attrs...)
}
